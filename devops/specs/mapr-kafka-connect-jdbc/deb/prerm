#!/bin/bash

[ -n "$VERBOSE" ] && echo "prerm called with argument \`$1'" >&2
[ -n "$VERBOSE" ] && set -x


#
# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
#
case "$1" in
    remove|upgrade|deconfigure)

      WARDEN_KAFKA_CONNECT_CONF=__PREFIX__/conf/conf.d/warden.kafka-connect.conf
      rm -Rf __PREFIX__/kafka-connect-jdbc/kafkaconnectjdbcversion
      if [ -d  __INSTALL_3DIGIT__/conf/ ]; then
          rm -Rf __INSTALL_3DIGIT__/conf/
      fi        
      # Number of installed Kafka Connector packages
      CONN_PACKAGES_NUM=$(dpkg-query -W --showformat='${Status}\n' 'mapr-kafka-connect-*' | grep -c "ok installed");
      if [ -f $WARDEN_KAFKA_CONNECT_CONF ] && [ $CONN_PACKAGES_NUM -eq 0 ] ;
        then
        KAFKA_VERSION=$(cat __PREFIX__/kafka/kafkaversion)
        bash /opt/mapr/kafka/kafka-${KAFKA_VERSION}/bin/connect-distributed-stop
        rm -Rf $WARDEN_KAFKA_CONNECT_CONF
        rm -Rf  __PREFIX__/conf/restart/kafka-connect-__VERSION_3DIGIT__.restart
        rm -f __PREFIX__/roles/kafka
      fi
    ;;  

    failed-upgrade)
    ;;

    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 1
    ;;  
esac    
